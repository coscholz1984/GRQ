// main global script file

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
  
  // Set normal font
  Game.NormalFont = eFontFont3;
  
  // Initialize Krypto Names
  KryptoNames[0] = "N1";
  KryptoNames[1] = "N2";
  KryptoNames[2] = "N3";
  KryptoNames[3] = "N4";
  KryptoNames[4] = "N5";
  KryptoNames[5] = "N6";
  KryptoNames[6] = "N7";
  KryptoNames[7] = "N8";
  KryptoNames[8] = "N9";
  
  // Set duration of a interest rate cycle
  SetTimer(3, 4000);
  // Set duration of 5 seconds timer for the clock
  SetTimer(4, 40);
  // Setup countdown clock
  LabelCountdown.Text = String.Format("%02d:%02d", CountdownMin, CountdownSec);
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  // Limit cash to 50,000
  if (Cash > 11111.0) {
    Cash = 11111.0;
    Display("Warning. You cannot carry more cash.");
    
    UpdateATM();
  }
  // At end of each debt cycle, add interest rates to debt and deposit
  if (IsTimerExpired(3)) {
    if (ATMDebt > 1.0) {
      ATMDebt = 1.1 * ATMDebt;
      ATMDeposit = 1.03 * ATMDeposit;
      UpdateATM();
    }
    SetTimer(3, 4000);
  }
  if (IsTimerExpired(4)) {
    if (CountdownSec > 0) {
      CountdownSec = CountdownSec - 1;
    } else {
      CountdownMin = CountdownMin - 1;
      if (CountdownMin < 0) {
        Display(String.Format("Congrats. You finished with a balance of %f.",ATMDeposit+Cash-ATMDebt));
        QuitGame(0);
      }
      CountdownSec = 60;
    }
    SetTimer(4, 40);
    LabelCountdown.Text = String.Format("%02d:%02d", CountdownMin, CountdownSec);
  }
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game
      open_gui(gExitGame);
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I don't want to have it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function iCup_Interact()
{
  player.Say("I don't think drinking this would be wise.");
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function UpdateHealthBar()
{
  String TmpString = "";
  int HealthBars = Health * 37 / 100;
  for (int i = 0; i < HealthBars; i++) {
    TmpString = TmpString.Append("|");
  }
  LabelHealth.Text = TmpString;
}

function UpdateEDs()
{
  String TmpString = "";
  if (EDs < 10) {
    TmpString = "  ";
  }
  else if (EDs < 100) {
    TmpString = " ";
  }
  TmpString = TmpString.Append("%d");
  TmpString = String.Format(TmpString,  EDs);
  LabelEDs.Text = TmpString;
}

function UpdateFWLs()
{
  String TmpString = "";
  if (FWLs < 10) {
    TmpString = "  ";
  }
  else if (FWLs < 100) {
    TmpString = " ";
  }
  TmpString = TmpString.Append("%d");
  TmpString = String.Format(TmpString,  FWLs);
  LabelFWLs.Text = TmpString;
}

function HideHUD()
{
  gHealth.Visible = false;
  gEnergy.Visible = false;
  gShield.Visible = false;
  gItems.Visible = false;
}

function ShowHUD()
{
  gHealth.Visible = true;
  gEnergy.Visible = true;
  gShield.Visible = true;
  gItems.Visible = true;
}

function cRed_AnyClick()
{
  player.WalkStraight(cRed.x, cRed.y, eBlock);
  player.FaceCharacter(cRed);
  player.Say("Hi!");
  cRed.FaceCharacter(player);
  cRed.Say("Greetings, what can I deposit for you?");
  gDepot.Visible = true;
}

function cGreen_AnyClick()
{
  player.Walk(cGreen.x, cGreen.y+20, eBlock);
  player.FaceCharacter(cGreen);
  player.Say("Hi!");
  cGreen.FaceCharacter(player);
  cGreen.Say("Hey. Want to buy some FWLs??");
  dDialog1.Start();
}

function gBtnTradingClose_OnClick(GUIControl *control, MouseButton button)
{
  gTrading.Visible = false;
}

function gTrading_OnClick(GUI *theGui, MouseButton button)
{
  if ((mouse.x>140 && mouse.x<(140+94) && mouse.y>35 && mouse.y<(35+111)) == false) {
    gTrading.Visible = false;
  }
}

function BuyFromMarket(int ItemNumber)
{
  if ((Cash - Market[ItemNumber].price) >= 0.0) {
    Inventory[ItemNumber].quantity++;
    Cash = Cash - Market[ItemNumber].price;
    Inventory[ItemNumber].UpdateInventoryGUI(ItemNumber);
  }
}

function SellToMarket(int ItemNumber)
{
  if (Inventory[ItemNumber].quantity > 0) {
    Inventory[ItemNumber].quantity--;
    Cash = Cash + Market[ItemNumber].price;
    Inventory[ItemNumber].UpdateInventoryGUI(ItemNumber);
  }
}

function AddToDeposit(int ItemNumber)
{
  if (Inventory[ItemNumber].quantity >= 1) {
    Inventory[ItemNumber].quantity--;
    Deposit[ItemNumber].quantity++;
    Inventory[ItemNumber].UpdateInventoryGUI(ItemNumber);
    Deposit[ItemNumber].UpdateDepotGUI(ItemNumber);
  }
}

function RemoveFromDeposit(int ItemNumber)
{
  if (Deposit[ItemNumber].quantity >= 1) {
    Inventory[ItemNumber].quantity++;
    Deposit[ItemNumber].quantity--;
    Inventory[ItemNumber].UpdateInventoryGUI(ItemNumber);
    Deposit[ItemNumber].UpdateDepotGUI(ItemNumber);
  }
}

// Setup all buy and sell buttons
function btnC1Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(0);
}

function btnC2Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(1);
}

function btnC3Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(2);
}

function btnC4Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(3);
}

function btnC5Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(4);
}

function btnC6Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(5);
}

function btnC7Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(6);
}

function btnC8Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(7);
}

function btnC9Buy_OnClick(GUIControl *control, MouseButton button)
{
  BuyFromMarket(8);
}

function btnC1Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(0);
}

function btnC2Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(1);
}

function btnC3Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(2);
}

function btnC4Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(3);
}

function btnC5Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(4);
}

function btnC6Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(5);
}

function btnC7Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(6);
}

function btnC8Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(7);
}

function btnC9Sell_OnClick(GUIControl *control, MouseButton button)
{
  SellToMarket(8);
}

function ChangeButtonState(bool B1, bool B2, bool B3, bool B4, bool B5, bool B6)
{
  BtnServ0.Visible = B1;
  BtnServ1.Visible = B2;
  BtnServ2.Visible = B3;
  BtnServ3.Visible = B4;
  BtnServ4.Visible = B5;
  BtnServ5.Visible = B6;
}

function TriggerEffect(int EffectNumber)
{
  PriceModifier = 0.0;
  switch (EffectNumber)
  {
    case 0:
      if (FWLs <= 0) {
        Display("You got hacked and loose energy.");
        Health = Health - 5;
      }
      else {
        Display("You got hacked and loose a FWL.");
        FWLs--;
      }
      break;
    case 1:
      Display("There is a shortage of Krypto on this server, prices increased.");
      PriceModifier = 1.0;
      break;
    case 2:
      Display("Your net subscription required updates (cost: 10.0).");
      Cash = Cash - 10.0;
      break;
    case 3:
      Display("UN issues ban on Krypto currency, prices decreased.");
      PriceModifier = -1.0;
      break;
    case 4:
      if (FWLs <= 0) {
        Display("You got hacked and loose money.");
        Cash = Cash - 10.0;
      }
      else {
        Display("You got hacked and loose a FWL.");
        FWLs--;
      }
      break;
    case 5:
      Display("Global inflation on the rise! Krypto prices increased.");
      PriceModifier = 1.0;
      break;
    default:
      break;
  }
  UpdateHealthBar();
  UpdateFWLs();
}

function BtnServ0_OnClick(GUIControl *control, MouseButton button)
{
  ChangeButtonState(false, true, true, true, true, true);
  ActiveServer = 0;
  SwitchedServer = true;
  TriggerEffect(Random(9));
}

function BtnServ1_OnClick(GUIControl *control, MouseButton button)
{
  ChangeButtonState(true, false, true, true, true, true);
  ActiveServer = 1;
  SwitchedServer = true;
  TriggerEffect(Random(9));
}

function BtnServ2_OnClick(GUIControl *control, MouseButton button)
{
  if (player.HasInventory(iYellow)) {
    ChangeButtonState(true, true, false, true, true, true);
    ActiveServer = 2;
    SwitchedServer = true;
    TriggerEffect(Random(9));
  }
  else {
    Display("Server 2 requires a yellow permit.");
  }
}

function BtnServ3_OnClick(GUIControl *control, MouseButton button)
{
  if (player.HasInventory(iBlue)) {
    ChangeButtonState(true, true, true, false, true, true);
    ActiveServer = 3;
    SwitchedServer = true;
    TriggerEffect(Random(9));
  }
  else {
    Display("Server 3 requires a blue permit.");
  }
}

function BtnServ4_OnClick(GUIControl *control, MouseButton button)
{
  if (player.HasInventory(iGreen)) {
    ChangeButtonState(true, true, true, true, false, true);
    ActiveServer = 4;
    SwitchedServer = true;
    TriggerEffect(Random(9));
  }
  else {
    Display("Server 4 & 5 require a green permit.");
  }
}

function BtnServ5_OnClick(GUIControl *control, MouseButton button)
{
  if (player.HasInventory(iGreen)) {
    ChangeButtonState(true, true, true, true, true, false);
    ActiveServer = 5;
    SwitchedServer = true;
    TriggerEffect(Random(9));
  }
  else {
    Display("Server 4 & 5 require a green permit.");
  }
}

function gEnergy_OnClick(GUI *theGui, MouseButton button)
{
  if ((Health < 100) & (EDs > 0)) {
    Health = FloatToInt(min(100.0, IntToFloat(Health + 10))); 
    EDs = EDs - 1;
    UpdateEDs();
    UpdateHealthBar();
    Display("Ahhhh. Refreshing!");
  }
  else if (EDs == 0) {
    Display("I'm out of EDs.");
  }
  else {
    Display("I'm full of energy, no need for an ED.");
  }
}

function gATM_OnClick(GUI *theGui, MouseButton button)
{
  if ((mouse.x>138 && mouse.x<(138+65) && mouse.y>63 && mouse.y<(63+65)) == false) {
    gATM.Visible = false;
  }
}

function BtnDepositPlus_OnClick(GUIControl *control, MouseButton button)
{
  if (Cash >= Incrementor) {
    ATMDeposit = ATMDeposit + Incrementor;
    Cash = Cash - Incrementor;
    UpdateATM();
  }
}

function BtnDepositMinus_OnClick(GUIControl *control, MouseButton button)
{
  if (ATMDeposit >= Incrementor) {
    ATMDeposit = ATMDeposit - Incrementor;
    Cash = Cash + Incrementor;
    UpdateATM();
  }
}

function BtnDebtPlus_OnClick(GUIControl *control, MouseButton button)
{
  ATMDebt = ATMDebt + Incrementor;
  Cash = Cash + Incrementor;
  UpdateATM();
}

function BtnDebtMinus_OnClick(GUIControl *control, MouseButton button)
{
  if ((Cash >= Incrementor) && (ATMDebt >= Incrementor)) {
    ATMDebt = ATMDebt - Incrementor;
    Cash = Cash - Incrementor;
    UpdateATM();
  }
  if ((Cash - Incrementor) < 0.0) {
    ATMDebt = ATMDebt - Cash;
    Cash = 0.0;
    if (ATMDebt < 0.0) {
      Cash = 0.0 - ATMDebt;
      ATMDebt = 0.0;
    }
    UpdateATM();
  }
  
}

function Btn100Inc_OnClick(GUIControl *control, MouseButton button)
{
  Incrementor = 100.0;
  Btn100Inc.Visible = false;
  Btn10Inc.Visible = true;
  Btn1Inc.Visible = true;
}

function Btn10Inc_OnClick(GUIControl *control, MouseButton button)
{
  Incrementor = 10.0;
  Btn100Inc.Visible = true;
  Btn10Inc.Visible = false;
  Btn1Inc.Visible = true;
}

function Btn1Inc_OnClick(GUIControl *control, MouseButton button)
{
  Incrementor = 1.0;
  Btn100Inc.Visible = true;
  Btn10Inc.Visible = true;
  Btn1Inc.Visible = false;
}

function gDepot_OnClick(GUIControl *control, MouseButton button)
{
  if ((mouse.x>132 && mouse.x<(132+94) && mouse.y>69 && mouse.y<(69+78)) == false) {
    gDepot.Visible = false;
  }
}

function btnC1Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(0);
}

function btnC2Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(1);
}

function btnC3Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(2);
}

function btnC4Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(3);
}

function btnC5Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(4);
}

function btnC6Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(5);
}

function btnC7Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(6);
}

function btnC8Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(7);
}

function btnC9Dep_OnClick(GUIControl *control, MouseButton button)
{
  AddToDeposit(8);
}

function btnC1Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(0);
}
function btnC2Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(1);
}

function btnC3Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(2);
}

function btnC4Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(3);
}

function btnC5Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(4);
}

function btnC6Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(5);
}

function btnC7Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(6);
}

function btnC8Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(7);
}

function btnC9Inv_OnClick(GUIControl *control, MouseButton button)
{
  RemoveFromDeposit(8);
}

function cYellowPerm_AnyClick()
{
  if (player.HasInventory(iYellow)) {
    cYellowPerm.Say("I see you already have a yellow permit.");
    cYellowPerm.Say("Maybe you want to check out the other permit shops?");
  }
  else {
    if (Cash < 100.0) {
      cYellowPerm.Say("A yellow permit costs 100. It seems you do not have enough cash.");
    } else {
      cYellowPerm.Say("That'll be 100. Here is your permit");
      Cash = Cash - 100.0;
      player.AddInventory(iYellow);
    }
  }
}

function cBluePerm_AnyClick()
{
    if (player.HasInventory(iBlue)) {
    cBluePerm.Say("I see you already have a blue permit.");
    cBluePerm.Say("Maybe you want to check out the other permit shops?");
  }
  else {
    if (Cash < 1000.0) {
      cBluePerm.Say("A blue permit costs 1000. It seems you do not have enough cash.");
    } else {
      cBluePerm.Say("That'll be 1000. Here is your permit");
      Cash = Cash - 1000.0;
      player.AddInventory(iBlue);
    }
  }
}

function cGreenPerm_AnyClick()
{
      if (player.HasInventory(iGreen)) {
    cGreenPerm.Say("I see you already have a green permit.");
    cGreenPerm.Say("Maybe you want to check out the other permit shops?");
  }
  else {
    if (Cash < 10000.0) {
      cGreenPerm.Say("A green permit costs 10000. It seems you do not have enough cash.");
    } else {
      cGreenPerm.Say("That'll be 10000. Here is your permit");
      Cash = Cash - 1000.0;
      player.AddInventory(iGreen);
    }
  }
}

function cMother_AnyClick()
{
  player.Walk(cMother.x, cMother.y-14, eBlock);
  player.FaceCharacter(cMother);
  cMother.Say("Hello. How are you?");
  player.Say("I'm fine.");
  cMother.Say("Oh, that's good. I hope I'll get better soon.");
  player.Say("Yes, mom, I'm sure you'll be fine again.");
}

function cBlue_AnyClick()
{
  player.Say("Hehe, that tickles!");
}
