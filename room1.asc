// room script file

// Define perdiod in game cycles at which prices are being updated
int MinCycleTime = 7;
int PriceCyclePeriod = 270;
bool TerminalFirstOpen = true;

function region1_WalksOnto()
{
  oRoof.Visible = false;
  oDoor.SetView(3);
  oDoor.Animate(0, 1, eOnce, eBlock, eForwards);
  oDoor.Animate(1, 1, eOnce, eNoBlock, eForwards);
}

function region2_Standing()
{
  oRoof.Visible = false;
  oTerminal.Clickable = true;
  cRed.Clickable = true;
  cGreen.Clickable = false;
  oVending.Clickable = false;
  oATM.Clickable = false;
}

function region2_WalksOff()
{
  oRoof.Visible = true;
  oTerminal.Clickable = false;
  cRed.Clickable = false;
  cGreen.Clickable = true;
  oVending.Clickable = true;
  oATM.Clickable = true;
}

function region1_Standing()
{
  oRoof.Visible = true;
}

function region1_WalksOff()
{
  oRoof.Visible = true;
  oTerminal.Clickable = false;
}

function oVending_AnyClick()
{
  player.Walk(232, 163, eBlock);
  player.FaceDirection(eDirectionUp);
  if (EDs < 100) {
    if (Cash > 1.0) {
      player.Say("Ah, cooled drinks! I'll get one.");
      Cash = Cash - 1.0;
      EDs = EDs + 1;
    }
    else {
      player.Say("I'm almost out of cash.");
    }
  }
  else {
    player.Say("Ah, cooled drinks! But I already have enough.");
  }
  UpdateEDs();
}

function oATM_AnyClick()
{
  player.Walk(92, 152, eBlock);
  player.FaceDirection(eDirectionUp);
  player.Say("I can manage my bank account here!");
  UpdateATM();
  gATM.Visible = true;
}

function oTerminal_AnyClick()
{
  player.Walk(208, 88, eBlock);
  player.FaceDirection(eDirectionUp);
  player.Say("Ready for trading!");
  gTrading.Visible = true;
  // Init timer,  prices and progress bar
  if (IsTimerExpired(1) | TerminalFirstOpen) {
    UpdateMarketPrice(PriceModifier);
    SetTimer(1, PriceCyclePeriod);
    SetTimer(2, MinCycleTime);
    LabelTimer.Text = "";
    TerminalFirstOpen = false;
  }
}

function room_FirstLoad()
{
  // Start background music
  aMusic = aPersistence.Play(eAudioPriorityHigh);
  // Init marketprice baseline
  AverageMarketPrices[0].UpdatePricesList(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0);
  AverageMarketPrices[1].UpdatePricesList(0.5, 0.5, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0);
  AverageMarketPrices[2].UpdatePricesList(1.5, 1.0, 0.7, 0.5, 2.5, 3.0, 1.0, 1.5, 2.0);
  AverageMarketPrices[3].UpdatePricesList(3.0, 2.0, 4.0, 1.0, 0.5, 4.5, 4.0, 3.0, 1.0);
  AverageMarketPrices[4].UpdatePricesList(4.0, 6.0, 1.0, 1.0, 2.0, 3.0, 0.5, 0.5, 8.0);
  AverageMarketPrices[5].UpdatePricesList(1.3, 3.1, 2.3, 7.1, 4.3, 0.1, 0.1, 7.5, 2.0);
  // Initializing inventory,  market,  deposit and GUI labels
  for (int iName = 0; iName < 9; iName++)
  {
    Inventory[iName].SetItem(KryptoNames[iName],0,3.0, 3.0);
    Market[iName].SetItem(KryptoNames[iName],0,3.0, 3.0);
    Deposit[iName].SetItem(KryptoNames[iName],0,3.0, 3.0);
    
    gTIList.AddItem(KryptoNames[iName]);
    gTIQuant.AddItem("0");
    gTMList.AddItem(KryptoNames[iName]);
    gTMPrice.AddItem("0.00");
    gDPList.AddItem(KryptoNames[iName]);
    gDPQuant.AddItem("0");
    gDPInv.AddItem(KryptoNames[iName]);
    gDPInvQuant.AddItem("0");
  }
  BtnServ0.Visible = false;
  // First Market Price update
  UpdateMarketPrice(PriceModifier);
  // Update EDs and FWLs,  Cash
  UpdateEDs();
  Cash = 100.0;
  Display("Get rich quick!");
}

function room_RepExec()
{
  if (gTrading.Visible == true) {
    gLabelCash.Text = String.Format("%.2f", Cash);
  }
  if (IsTimerExpired(1) | SwitchedServer) {
    LabelTimer.Text = "";
    UpdateMarketPrice(PriceModifier);
    SetTimer(1, PriceCyclePeriod);
    SetTimer(2, MinCycleTime);//PriceCyclePeriod/34);
    SwitchedServer = false;
  }
  // Here we update the progress bar of each cycle
  if (IsTimerExpired(2)) {
    if (LabelTimer.Text.Length < 44) {
      LabelTimer.Text = LabelTimer.Text.Append("|");
    }
    SetTimer(2, MinCycleTime);//PriceCyclePeriod/34);
  }
}

function hLeft_AnyClick()
{
  // Bring player to permission shop for Yellow
  player.Walk(35, 123, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionLeft);
  cYellowPerm.ChangeRoom(2, 138, 107, eDirectionDown);
  cGreenPerm.ChangeRoom(2, 138, 307, eDirectionDown);
  cBluePerm.ChangeRoom(2, 138, 307, eDirectionDown);
  HideHUD();
  Wait(12);
  player.ChangeRoom(2, 136, 132, eDirectionUp);
}

function hRight_AnyClick()
{
  // Bring player to permission shop for Green
  player.Walk(302, 123, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionRight);
  cGreenPerm.ChangeRoom(2, 138, 107, eDirectionDown);
  cYellowPerm.ChangeRoom(2, 138, 307, eDirectionDown);
  cBluePerm.ChangeRoom(2, 138, 307, eDirectionDown);
  HideHUD();
  Wait(12);
  player.ChangeRoom(2, 136, 132, eDirectionUp);
}

function hTop_AnyClick()
{
  // Bring player to permission shop for Blue
  player.Walk(170, 38, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionUp);
  cBluePerm.ChangeRoom(2, 138, 107, eDirectionDown);
  cYellowPerm.ChangeRoom(2, 138, 307, eDirectionDown);
  cGreenPerm.ChangeRoom(2, 138, 307, eDirectionDown);
  HideHUD();
  Wait(12);
  player.ChangeRoom(2, 136, 132, eDirectionUp);
}

function hHome_AnyClick()
{
  // Go home
  player.Walk(167, 188, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionDown);
  HideHUD();
  Wait(12);
  player.ChangeRoom(3, 125, 144, eDirectionUp);
}
